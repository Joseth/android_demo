diff --git a/packages/apps/Contacts/AndroidManifest.xml b/packages/apps/Contacts/AndroidManifest.xml
index 01cb4e9..ebd45b0 100755
--- a/packages/apps/Contacts/AndroidManifest.xml
+++ b/packages/apps/Contacts/AndroidManifest.xml
@@ -783,6 +783,7 @@
                 <action android:name="android.intent.action.sim.SIM_FILES_CHANGED" />
                 <action android:name="android.intent.action.SIM_SETTING_INFO_CHANGED" />
                 <action android:name="android.intent.action.ACTION_PHONE_RESTART" />
+                <action android:name="android.intent.action.SIM_INDICATOR_STATE_CHANGED" />
            </intent-filter>
         </receiver>
         <!-- The EditDimContactActivity -->
diff --git a/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/AbstractStartSIMService.java b/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/AbstractStartSIMService.java
index 8bc668a..465faf2 100755
--- a/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/AbstractStartSIMService.java
+++ b/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/AbstractStartSIMService.java
@@ -1050,6 +1050,13 @@ public abstract class AbstractStartSIMService extends Service {
                         // @}
                         Log.d(TAG, "SLOT" + slotId + " DoneWorkType: " + doneWorkType);
 
+                        // Added by Joseth @{
+                        if (doneWorkType == SERVICE_WORK_IMPORT && bSuccess) {
+                            BootCmpReceiver.processPhbLoadFinished(
+                                AbstractStartSIMService.this, slotId, bSuccess);
+                        }
+                        // @}
+                        
                         if (doneWorkType == SERVICE_WORK_IMPORT
                                 && getServiceState(slotId) == SERVICE_IMPORT_CONTACTS) {
                             SlotUtils.updateSimServiceRunningStateForSlot(slotId, false);
diff --git a/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/BootCmpReceiver.java b/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/BootCmpReceiver.java
index 7582f1a..9fdced8 100755
--- a/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/BootCmpReceiver.java
+++ b/packages/apps/Contacts/src/com/mediatek/contacts/simcontact/BootCmpReceiver.java
@@ -39,6 +39,12 @@ import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.database.ContentObserver;
+import android.database.Cursor;
+import android.os.PowerManager;
+import android.provider.BaseColumns;
+import android.provider.ContactsContract.Contacts;
+import android.provider.Telephony.SIMInfo;
 import android.util.Log;
 import android.util.SparseArray;
 
@@ -85,6 +91,10 @@ public class BootCmpReceiver extends BroadcastReceiver {
             processIpoShutDown();
         } else if (action.equals("android.intent.action.ACTION_PHONE_RESTART")) {
             processPhoneReset(intent);
+        } else if (action.equals(TelephonyIntents.ACTION_SIM_INDICATOR_STATE_CHANGED)) {
+            processSimIndicatorChanged(intent);
+        } else if (action.equals(AbstractStartSIMService.ACTION_PHB_LOAD_FINISHED)) {
+            //processPhbLoadFinished(intent);
         }
     }
 
@@ -230,4 +240,163 @@ public class BootCmpReceiver extends BroadcastReceiver {
             startSimService(SlotUtils.getSingleSlotId(), AbstractStartSIMService.SERVICE_WORK_IMPORT);
         }
     }
+
+    // SIM TEST: Added by Joseth @
+    private static final String TAG_JOSETH = "JOSETH";
+    private static int sSimChecked = 0;
+    public static final String PREFS_SIM_TEST = "sim_tests";
+    public static final String PREFS_KEY_REBOOT_COUNT = "reboot_count";
+    public static final String PREFS_KEY_IMPORT_CONTACTS_PREFIX = "import_contacts_sim";
+    public static final String PREFS_KEY_SIM_STATE_PREFIX = "state_sim";
+    private static final int sSimNum = PhoneConstants.GEMINI_SIM_NUM;
+    
+    private static boolean sRebooting = false;
+    private static final int []SIM_CONTACTS_NUM = {150, 200, 250, 0};
+
+    void processSimIndicatorChanged(Intent intent) {
+        int slotId = intent.getIntExtra(TelephonyIntents.INTENT_KEY_ICC_SLOT, -1);
+        int simStatus = intent.getIntExtra(TelephonyIntents.INTENT_KEY_ICC_STATE, -1);
+        if (slotId == -1)
+            return;
+
+        Log.d(TAG_JOSETH, "processSimIndicatorChanged: slotId = " + slotId 
+            + ", simStatus = " + simStatus);
+        
+        setSimState(sContext, slotId, simStatus);
+        
+        rebootIfOk();
+    }
+
+    public static void processPhbLoadFinished(Context context, 
+            int slotId, boolean success) {
+        Log.d(TAG_JOSETH, "processPhbLoadFinished: slotId = " + slotId);
+        Context ctx = (sContext != null) ? sContext : context;
+        
+        setImportState(ctx, slotId, success);
+
+        rebootIfOk();
+    }
+
+    private static void rebootIfOk() {
+        if (sRebooting) return;
+
+        for (int i = 0; i < sSimNum; i++) {
+            if (!isSlotOK(sContext, i))
+                return;
+        }
+
+        // Reboot
+        sRebooting = true;
+        clearSettings(sContext);
+        //postDelayed(mRebootRunnable, 5 * 1000);
+        rebootSystem();
+    }
+
+    private static void rebootSystem() {
+        try {
+            increaseRebootCount(sContext);
+            
+            Log.d(TAG_JOSETH, "Reboot count = " + getRebootCount(sContext));
+            Log.d(TAG_JOSETH, "rebooting ... ");
+            PowerManager pm = (PowerManager) sContext.getSystemService(Context.POWER_SERVICE);
+            pm.reboot("test");
+
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            Log.e(TAG_JOSETH, "reboot error");
+        }
+    }
+
+    private static boolean isSlotOK(Context context, int slotId) {
+        int state = getSimState(context, slotId);
+        if (state < PhoneConstants.SIM_INDICATOR_NORMAL)
+            return false;
+
+        boolean imported = getImportState(context, slotId);
+        if (!imported)
+            return false;        
+        int cnt = getContactCount(context, slotId);
+        if (cnt != SIM_CONTACTS_NUM[slotId]) {
+            Log.e(TAG_JOSETH, "slotId = " + slotId + ", contacts count = " + cnt);
+            return false;
+        }
+
+        return true;
+    }
+    
+    private static void clearSettings(Context context) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        SharedPreferences.Editor editor = settings.edit();
+        int cnt = settings.getInt(PREFS_KEY_REBOOT_COUNT, 0);
+        
+        editor.clear();
+        editor.putInt(PREFS_KEY_REBOOT_COUNT, cnt);
+        editor.commit();
+    }
+    
+    private static int getSimState(Context context, int slotId) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        String key = PREFS_KEY_SIM_STATE_PREFIX + slotId;
+        
+        return settings.getInt(key, PhoneConstants.SIM_INDICATOR_UNKNOWN);
+    }
+
+    private static void setSimState(Context context, int slotId, int state) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        SharedPreferences.Editor editor = settings.edit();
+        String key = PREFS_KEY_SIM_STATE_PREFIX + slotId;
+
+        editor.putInt(key, state);
+        editor.commit();
+    }
+    
+
+    public static boolean getImportState(Context context, int slotId) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        String key = PREFS_KEY_IMPORT_CONTACTS_PREFIX + slotId;
+        return settings.getBoolean(key, false);
+    }
+
+    public static void setImportState(Context context, int slotId, boolean success) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        SharedPreferences.Editor editor = settings.edit();
+        String key = PREFS_KEY_IMPORT_CONTACTS_PREFIX + slotId;
+
+        editor.putBoolean(key, success);
+        editor.commit();
+    }
+    
+    public static int getRebootCount(Context context) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        return settings.getInt(PREFS_KEY_REBOOT_COUNT, 0);
+    }
+
+    private static void increaseRebootCount(Context context) {
+        SharedPreferences settings = context.getSharedPreferences(PREFS_SIM_TEST, 0);
+        int cnt = settings.getInt(PREFS_KEY_REBOOT_COUNT, 0);
+        SharedPreferences.Editor editor = settings.edit();
+
+        editor.putInt(PREFS_KEY_REBOOT_COUNT, cnt + 1);
+        editor.commit();
+    }    
+
+    private static final String[] PROJECTION_ID_ONLY = {BaseColumns._ID};
+    private static int getContactCount(Context context, int slotId) {
+        SIMInfo simInfo = SIMInfo.getSIMInfoBySlot(context, slotId);
+        String selection = Contacts.INDICATE_PHONE_SIM + "= ?";
+        String[] selectionArgs = {String.valueOf(simInfo.mSimId)};
+        
+        final Cursor cursor = context.getContentResolver().query(
+                Contacts.CONTENT_URI, PROJECTION_ID_ONLY, selection, selectionArgs, null);
+        if (cursor != null) {
+            try {
+                return cursor.getCount();
+            } finally {
+                cursor.close();
+            }
+        }
+        return 0;
+    }
+
+    // @}
 }
